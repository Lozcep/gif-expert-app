{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,sBAAMC,SAVU,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAOP,GAAP,mBAAuBO,OAC1CN,EAAc,MAKd,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDAEsBC,UAAWH,GAFjC,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCDTO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,8BAAIA,EAAJ,WCJEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATAC,qBAAU,WAERxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CAAEf,KAAMkB,EACfL,SAAS,SAGZ,CAACpB,IAEGqB,EDbyBK,CAAa1B,GAAhCa,EAF0B,EAEhCN,KAAca,EAFkB,EAElBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAErDoB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGIH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEcNgB,EA7BM,WAAO,IAAD,EAGazC,mBAAS,CAAC,gBAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAQvB,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAECA,SAAUA,GADNA,YCnB1B6B,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.dd92ad41.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSumit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length > 2){\r\n        setCategories((cats =>  [ inputValue,  ...cats ] ))\r\n        setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSumit}>\r\n            <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={ handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\n  export const getGifs = async (category) => {\r\n    const url =\r\n    `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category)}&limit=10&api_key=sJx58Jw7GRvcQNZwrf6SKlpYOTDrmpJj`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return gifs   \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title} />\r\n           <p>{title} </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const {data: images, loading} = useFetchGifs(category)\r\n\r\n  return (\r\n      <>\r\n      <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\r\n\r\n    {loading && <p className=\"animate__animated animate__fadeIn\">loading</p> }\r\n\r\n    <div className=\"card-grid\" >\r\n      \r\n        {\r\n        images.map((img) => (\r\n            <GifGridItem \r\n            key={img.id}\r\n            {...img} />\r\n        ))\r\n        }\r\n     \r\n    </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n    getGifs(category).then((imgs) => {\r\n      setState({ data: imgs, \r\n        loading: false });\r\n    })\r\n\r\n  }, [category]);\r\n\r\n  return state\r\n};\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n   \r\n\r\n\r\n   \r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>\r\n          <AddCategory setCategories={setCategories} />\r\n          <hr />\r\n\r\n          \r\n\r\n          <ol>\r\n              {\r\n                  categories.map((category) => \r\n                     <GifGrid\r\n                     key={category}\r\n                      category={category} />\r\n                  )\r\n              }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />\r\n ,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}